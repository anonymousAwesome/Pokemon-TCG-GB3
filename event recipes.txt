Note: anything formatted like ~~this~~ means you're supposed to replace it before using the recipe.

        #make the NPC walk right 2 tiles
        inner_context.event_manager.add_event(self.sprite.cutscene_walk,["right"])
        inner_context.event_manager.add_event(self.sprite.start_walking,[4])
        inner_context.event_manager.add_event(self.sprite.continue_walking,[4],persistent_condition=self.sprite.still_walking)
        inner_context.event_manager.add_event(self.sprite.start_walking,[4])
        inner_context.event_manager.add_event(self.sprite.continue_walking,[4],persistent_condition=self.sprite.still_walking)
        inner_context.event_manager.add_event(inner_context.map_input_lock.unlock)
        inner_context.map_input_lock.lock()

		#Note: the 4 is the speed of the character movement. Increase or decrease it to 8 or 2 for faster or slower movement.

		#make the player walk right one tile
        inner_context.event_manager.add_event(inner_context.player_character.cutscene_walk,["right"])
        inner_context.event_manager.add_event(inner_context.player_character.start_walking,[4])
        inner_context.event_manager.add_event(inner_context.player_character.continue_walking,[4],persistent_condition=inner_context.player_character.still_walking)
        inner_context.event_manager.add_event(inner_context.map_input_lock.unlock)
        inner_context.map_input_lock.lock()


		#dialogue, no name or image
        inner_context.event_manager.add_event(dialogue_facing,[inner_context.player_character,self])
        inner_context.event_manager.add_event(inner_context.current_dialogue.__init__,[inner_context.screen,"Welcome! I'm Dr. Mason, with a PhD in Pokemon cardology!"])
        inner_context.event_manager.add_event(inner_context.current_dialogue.render,[event_list],persistent_condition=inner_context.current_dialogue.check_remaining_text)
        inner_context.event_manager.add_event(inner_context.map_input_lock.unlock)
        inner_context.map_input_lock.lock()


        #pause for 60 frames; 1 sec.
        inner_context.event_manager.add_event(empty_event.__init__,[60])
        inner_context.event_manager.add_event(empty_event.decrement_loops,persistent_condition=empty_event.check_still_looping)
        inner_context.event_manager.add_event(inner_context.map_input_lock.unlock) #not sure if necessary?
        inner_context.map_input_lock.lock()


        #dialogue with name and image        

        #add to __init__:
        self.photo_location=os.path.join("assets", "duellists", "Charity.png")

        #then, in interact_object:
        inner_context.event_manager.add_event(dialogue_facing,[self.player_character,self])
        inner_context.event_manager.add_event(inner_context.current_dialogue.__init__,[inner_context.screen,"Welcome to the trading post.\nWould you like to make a trade?"],{"name_text":"Charity","photo_location":self.photo_location})
        inner_context.event_manager.add_event(inner_context.current_dialogue.render,[event_list],persistent_condition=inner_context.current_dialogue.check_remaining_text)
        inner_context.event_manager.add_event(inner_context.map_input_lock.unlock)
        inner_context.map_input_lock.lock()


        #handling event flags
		#note that the event flags don't update until the event queue is processed, so you can't 
        #set an event flag and check it within the same event chain.
        
        inner_context.event_manager.add_event(dialogue_facing,[inner_context.player_character,self])
        if not inner_context.player_data.event_flags["first event"]:
            inner_context.event_manager.add_event(inner_context.current_dialogue.__init__,[inner_context.screen,"Welcome! I'm Dr. Mason, with a PhD in Pokemon cardology!"])
            inner_context.event_manager.add_event(inner_context.player_data.set_flag,["first event"])
        else:
            inner_context.event_manager.add_event(inner_context.current_dialogue.__init__,[inner_context.screen,"You already talked to me once before!"])
        inner_context.event_manager.add_event(inner_context.current_dialogue.render,[inner_context.event_list],persistent_condition=inner_context.current_dialogue.check_remaining_text)
        inner_context.event_manager.add_event(inner_context.map_input_lock.unlock)
        inner_context.map_input_lock.lock()


        #adding cards and checking the card pool

        inner_context.event_manager.add_event(inner_context.player_data.add_cards,[["card1","card2"]])
        inner_context.event_manager.add_event(inner_context.player_data.display_cards)


        #setting name and using name.
        #note that the name appears as None the first time, but since the name generally won't be set
        #in the same loop as it's being checked, this won't be an issue.
        
        inner_context.event_manager.add_event(inner_context.player_data.set_name,["Bob"])
        inner_context.event_manager.add_event(inner_context.current_dialogue.__init__,[inner_context.screen,f"Ah! I see! Your name is {inner_context.player_data.player_name}!"])


        #randomly-generate a word and use that in dialogue

        temp_word=random_name.gen_word()
        inner_context.event_manager.add_event(dialogue_facing,[inner_context.player_character,self])
        inner_context.event_manager.add_event(inner_context.current_dialogue.__init__,[inner_context.screen,f"Your magic word is {temp_word}! That'll be five dollars."])
        inner_context.event_manager.add_event(inner_context.current_dialogue.render,[inner_context.event_list],persistent_condition=inner_context.current_dialogue.check_remaining_text)
        inner_context.event_manager.add_event(inner_context.map_input_lock.unlock)
        inner_context.map_input_lock.lock()


        #pulse glitch effect, locked input
        inner_context.event_manager.add_event(glitch_effect.start_glitch)
        inner_context.event_manager.add_event(glitch_effect.pulse_glitch,[inner_context.screen],persistent_condition=glitch_effect.check_time_remaining)
        inner_context.event_manager.add_event(inner_context.map_input_lock.unlock)
        inner_context.map_input_lock.lock()

        #steady glitch effect, no lock
        inner_context.event_manager.add_event(glitch_effect.start_glitch,[300])
        inner_context.event_manager.add_event(glitch_effect.steady_glitch,[inner_context.screen],persistent_condition=glitch_effect.check_time_remaining)

        #remove an NPC from the map
        #Note: You'll need to replace ~~NpcClassNameHere~~ with the class name of the NPC to
        #be removed, such as DrMason, and ~~CurrentMap~~ with the current map, such as 
        #MasonCenter (if the map needs to be reloaded).

        inner_context.event_manager.add_event(inner_context.player_data.remove_npc,[~~NpcClassNameHere~~])
        inner_context.event_manager.add_event(reload_map,[inner_context,~~CurrentMap~~])

        #to reverse the effect, replace remove_npc with undelete_npc


        #add an effect that triggers just before the map changes
        #add the following function to the specific exit class, such as MasonCenterBottomExit
    
        def step_on(self,inner_context):
            inner_context.event_manager.add_event(inner_context.current_dialogue.__init__,[inner_context.screen,"Welcome! I'm Dr. Mason, with a PhD in Pokemon cardology!"])
            inner_context.event_manager.add_event(inner_context.current_dialogue.render,[inner_context.event_list],persistent_condition=inner_context.current_dialogue.check_remaining_text)
            inner_context.event_manager.add_event(BaseExitClass.step_on,[self,inner_context])
            inner_context.event_manager.add_event(inner_context.reset_exit_flag)
            inner_context.event_manager.add_event(inner_context.map_input_lock.unlock)
            inner_context.map_input_lock.lock()
            inner_context.just_stepped_on_exit = True


        #add an effect that triggers just after the map changes.
        #add the following function to the specific exit class, such as MasonCenterBottomExit
        #This one is simpler, since I don't need to make sure the event isn't repeatedly added to the queue.
        def step_on(self,inner_context):
            inner_context.event_manager.add_event(BaseExitClass.step_on,[self,inner_context])        
            inner_context.event_manager.add_event(inner_context.current_dialogue.__init__,[inner_context.screen,"Welcome! I'm Dr. Mason, with a PhD in Pokemon cardology!"])
            inner_context.event_manager.add_event(inner_context.current_dialogue.render,[inner_context.event_list],persistent_condition=inner_context.current_dialogue.check_remaining_text)
            inner_context.event_manager.add_event(inner_context.map_input_lock.unlock)
            inner_context.map_input_lock.lock()

        #toggle greyscale:
        #~~current_map~~ example: MasonCenter
        inner_context.event_manager.add_event(inner_context.player_data.toggle_greyscale)
        inner_context.event_manager.add_event(reload_map,[inner_context,~~current_map~~])

		
		#getting the dialogue boxes to be greyscale:
		inner_context.event_manager.add_event(inner_context.current_dialogue.__init__,[inner_context.screen,"It's a chalkboard.\nIt just says \"butts lol\". :/"],{"greyscale":inner_context.player_data.currently_greyscale})
		#note that you'll only need to do this for the few screens that require dialogue in the greyscale flashback; Normal club, airport, and Mason's Lab. I'm undecided on whether or not I should make the Normal Club dialogue boxes and profile images greyscale.

        #creating an animation
        #~~animation sprite class~~ example: RudimentarySprite
        inner_context.event_manager.add_event(inner_context.animation_manager.add_animation,[animation.~~animation sprite class~~(inner_context)])

		#end all animations when transitioning between maps; untested
        inner_context.event_manager.add_event(inner_context.animation_manager.cancel_all_animations)

		#code to trigger the dummy duel module.
    	def interact_object(self,inner_context):
        	inner_context.event_manager.add_event(inner_context.phase_handler.set_duel_data,[],{"player_deck":[~~the player's deck~~],"opponent_deck":[~~the opponent's deck~~],"background_image":~~the background image~~})
        	inner_context.event_manager.add_event(inner_context.phase_handler.set_game_phase,["duel"])
        	inner_context.event_manager.add_event(award_rewards,[inner_context,~~reward~~])
	