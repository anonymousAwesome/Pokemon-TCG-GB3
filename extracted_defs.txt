main.py
'''Stores the current program phase (overworld/duelling) and initiates the main game loop.'''
    class PhaseHandler:
        def __init__(self):
        def set_game_phase(self):
        def get_game_phase(self):

overworld.py
'''contains player movement logic, as well as code to display sprites and the background on the screen.''' 
    class Player:
        def __init__(self):
        def update(self):
        def draw(self):
    def can_move():
    def render():

duel.py
'''currently contains code to render a specific combination of sprites and background to the screen. Need to expand that so it can flip between multiple duelling screens.'''
    def render():


decks.py
'''will contain combinations of cards that then get loaded by the duel. Currently unconnected to the rest of the program.'''
    def generate():

duel_ai.py
'''currently empty, will contain the AI for enemies duelling the player.'''

duel_classdefs.py
'''defines a lot of concepts; mostly cards and card collections.'''
    class DuelManager:
        def __init__(self):
        def starting_coin(self):
        def advance_turn(self):
        def end_duel(self):
    class Card:
        def __init__(self):
        def __str__(self):
    class Trainer:
        def __init__(self):
    class Energy:
        def __init__(self):
    class Pokemon:
        def __init__(self):
        def __str__(self):
        def attack(self):
        def attach_card(self):
        def evolve(self):
    class CardCollection:
        def __init__(self):
        def __str__(self):
        def __contains__(self):
        def __iter__(self):
        def __len__(self):
        def __getitem__(self):
    class Prizes:
        def __init__(self):
    def move_cards_to_from():
    class Player:
        def __init__(self):
        def initial_draw(self):
        def place_prizes(self):
        def take_prize(self):

effects.py
'''a work in progress. It's supposed to generate effects for pokemon attacks and trainer cards, but I don't have the larger system set up yet.'''
    def defender():
    def weakness():
    def resistance():
    def plus_power():

menu.py
'''storing and changing which menu is currently active, and storing the logic for each menu.'''
    class MenuStackNavigation:
        def __init__(self):
        def reset_to_main(self):
        def current_menu(self):
        def back_one_level(self):
        def jump_to_index(self):
        def add_to_stack(self):
    class Main:
        def __init__(self):
        def run_menu(self):
    class MenuBase:
        def get_choices(self):
        def prompt_choice(self):
        def execute_choice(self):
    class InitialMenu:
        def get_choices(self):
        def prompt_choice(self):
        def execute_choice(self):
    class Hand:
        def __init__(self):
        def get_choices(self):
        def prompt_choice(self):
        def execute_choice(self):
    class HandCard:
        def __init__(self):
        def get_choices(self):
        def prompt_choice(self):
        def execute_choice(self):
    class HandCardEnergy:
        def __init__(self):
        def get_choices(self):
        def prompt_choice(self):
        def execute_choice(self):

ui.py
'''Not entirely clear what responsibilities ui.py is supposed to have. Might split it up into other locations.'''
    class Menu:
        def __init__(self):
        def handle_input(self):
    def dialogue():

player.py
'''nothing now, but eventually it will store long-term player information, such as player decks, player medals, event flags triggered, etc.'''

audio.py
''self-explanatory.'''

cards.py
'''contains the raw data needed to generate card objects.'''

deckbuilding.py
'''empty, presumably going to store the deckbuilding ui when selected from the overworld menu.'''

event_database.py
'''currently empty, but is to contain dialogue, player interactions with NPCs, and cutscene sprite movements.'''


Planned gameplay loop:

start at main. Load the most recent player location (screen and coordinates) from player.py. 
Perpetually check:
 if the player moved onto an event tile, which may trigger a cutscene or move the player to a different screen.  
 if the player pressed the interact button while facing an interactable object.
Either way, the appropriate event from event_database is triggered. This will usually calling the dialogue function, the player choice function, and/or the cutscene function.
If the event triggers a duel, change PhaseHandler.game_phase to "duelling". Set up the duel, loading both players' decks, re-drawing if no Basic Pokemon, choosing Basic Pokemon to play, flipping the coin, and then getting into the main game loop. 
At this point, the program should check the current screen in the duel, print the visible elements (cards, energy, HP, etc) and any text or choices. 

There should be code to connect the visible text and cursor location to the functions that get called if the player presses the appropriate button, but I'm not sure what form that should take.

Once the player wins or loses, the phase shifts back and any post-game events are called.




The single biggest issue right now is getting the UI working. Specifically, the main duel menu. 

For the duel menu specifically, I want a function that places the standard options and the cursor on the screen. I'll worry about expanding it to include other menus (if I even do) later.

Then I'll need to find some way to move the cursor around and connect the cursor location to the function that gets called if the appropriate button is pressed.

